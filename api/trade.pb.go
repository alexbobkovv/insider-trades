// protoc --go_out=. *.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: trade.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor string `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit  uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TradeRequest) Reset() {
	*x = TradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRequest) ProtoMessage() {}

func (x *TradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRequest.ProtoReflect.Descriptor instead.
func (*TradeRequest) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{0}
}

func (x *TradeRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *TradeRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TradeViewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cursor string `protobuf:"bytes,1,opt,name=cursor,proto3" json:"cursor,omitempty"`
	Limit  uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TradeViewRequest) Reset() {
	*x = TradeViewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeViewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeViewRequest) ProtoMessage() {}

func (x *TradeViewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeViewRequest.ProtoReflect.Descriptor instead.
func (*TradeViewRequest) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{1}
}

func (x *TradeViewRequest) GetCursor() string {
	if x != nil {
		return x.Cursor
	}
	return ""
}

func (x *TradeViewRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TradeViewResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SecFilingsID        string                 `protobuf:"bytes,2,opt,name=SecFilingsID,proto3" json:"SecFilingsID,omitempty"`
	TransactionTypeName string                 `protobuf:"bytes,3,opt,name=TransactionTypeName,proto3" json:"TransactionTypeName,omitempty"`
	AveragePrice        float64                `protobuf:"fixed64,4,opt,name=AveragePrice,proto3" json:"AveragePrice,omitempty"`
	TotalShares         int64                  `protobuf:"varint,5,opt,name=TotalShares,proto3" json:"TotalShares,omitempty"`
	TotalValue          float64                `protobuf:"fixed64,6,opt,name=TotalValue,proto3" json:"TotalValue,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	URL                 string                 `protobuf:"bytes,8,opt,name=URL,proto3" json:"URL,omitempty"`
	InsiderID           string                 `protobuf:"bytes,9,opt,name=InsiderID,proto3" json:"InsiderID,omitempty"`
	CompanyID           string                 `protobuf:"bytes,10,opt,name=CompanyID,proto3" json:"CompanyID,omitempty"`
	OfficerPosition     string                 `protobuf:"bytes,11,opt,name=OfficerPosition,proto3" json:"OfficerPosition,omitempty"`
	ReportedOn          string                 `protobuf:"bytes,12,opt,name=ReportedOn,proto3" json:"ReportedOn,omitempty"`
	InsiderCik          int64                  `protobuf:"varint,13,opt,name=InsiderCik,proto3" json:"InsiderCik,omitempty"`
	InsiderName         string                 `protobuf:"bytes,14,opt,name=InsiderName,proto3" json:"InsiderName,omitempty"`
	CompanyCik          int64                  `protobuf:"varint,15,opt,name=CompanyCik,proto3" json:"CompanyCik,omitempty"`
	CompanyName         string                 `protobuf:"bytes,16,opt,name=CompanyName,proto3" json:"CompanyName,omitempty"`
	CompanyTicker       string                 `protobuf:"bytes,17,opt,name=CompanyTicker,proto3" json:"CompanyTicker,omitempty"`
}

func (x *TradeViewResponse) Reset() {
	*x = TradeViewResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeViewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeViewResponse) ProtoMessage() {}

func (x *TradeViewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeViewResponse.ProtoReflect.Descriptor instead.
func (*TradeViewResponse) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{2}
}

func (x *TradeViewResponse) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TradeViewResponse) GetSecFilingsID() string {
	if x != nil {
		return x.SecFilingsID
	}
	return ""
}

func (x *TradeViewResponse) GetTransactionTypeName() string {
	if x != nil {
		return x.TransactionTypeName
	}
	return ""
}

func (x *TradeViewResponse) GetAveragePrice() float64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

func (x *TradeViewResponse) GetTotalShares() int64 {
	if x != nil {
		return x.TotalShares
	}
	return 0
}

func (x *TradeViewResponse) GetTotalValue() float64 {
	if x != nil {
		return x.TotalValue
	}
	return 0
}

func (x *TradeViewResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TradeViewResponse) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *TradeViewResponse) GetInsiderID() string {
	if x != nil {
		return x.InsiderID
	}
	return ""
}

func (x *TradeViewResponse) GetCompanyID() string {
	if x != nil {
		return x.CompanyID
	}
	return ""
}

func (x *TradeViewResponse) GetOfficerPosition() string {
	if x != nil {
		return x.OfficerPosition
	}
	return ""
}

func (x *TradeViewResponse) GetReportedOn() string {
	if x != nil {
		return x.ReportedOn
	}
	return ""
}

func (x *TradeViewResponse) GetInsiderCik() int64 {
	if x != nil {
		return x.InsiderCik
	}
	return 0
}

func (x *TradeViewResponse) GetInsiderName() string {
	if x != nil {
		return x.InsiderName
	}
	return ""
}

func (x *TradeViewResponse) GetCompanyCik() int64 {
	if x != nil {
		return x.CompanyCik
	}
	return 0
}

func (x *TradeViewResponse) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *TradeViewResponse) GetCompanyTicker() string {
	if x != nil {
		return x.CompanyTicker
	}
	return ""
}

type Company struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Cik    int64  `protobuf:"varint,2,opt,name=Cik,proto3" json:"Cik,omitempty"`
	Name   string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Ticker string `protobuf:"bytes,4,opt,name=Ticker,proto3" json:"Ticker,omitempty"`
}

func (x *Company) Reset() {
	*x = Company{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Company.ProtoReflect.Descriptor instead.
func (*Company) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{3}
}

func (x *Company) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Company) GetCik() int64 {
	if x != nil {
		return x.Cik
	}
	return 0
}

func (x *Company) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Company) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

type Insider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Cik  int64  `protobuf:"varint,2,opt,name=Cik,proto3" json:"Cik,omitempty"`
	Name string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Insider) Reset() {
	*x = Insider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Insider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Insider) ProtoMessage() {}

func (x *Insider) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Insider.ProtoReflect.Descriptor instead.
func (*Insider) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{4}
}

func (x *Insider) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Insider) GetCik() int64 {
	if x != nil {
		return x.Cik
	}
	return 0
}

func (x *Insider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SecFiling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string  `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	FilingType      *int64  `protobuf:"varint,2,opt,name=FilingType,proto3,oneof" json:"FilingType,omitempty"`
	URL             string  `protobuf:"bytes,3,opt,name=URL,proto3" json:"URL,omitempty"`
	InsiderID       string  `protobuf:"bytes,4,opt,name=InsiderID,proto3" json:"InsiderID,omitempty"`
	CompanyID       string  `protobuf:"bytes,5,opt,name=CompanyID,proto3" json:"CompanyID,omitempty"`
	OfficerPosition *string `protobuf:"bytes,6,opt,name=OfficerPosition,proto3,oneof" json:"OfficerPosition,omitempty"`
	ReportedOn      string  `protobuf:"bytes,7,opt,name=ReportedOn,proto3" json:"ReportedOn,omitempty"`
}

func (x *SecFiling) Reset() {
	*x = SecFiling{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecFiling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecFiling) ProtoMessage() {}

func (x *SecFiling) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecFiling.ProtoReflect.Descriptor instead.
func (*SecFiling) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{5}
}

func (x *SecFiling) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *SecFiling) GetFilingType() int64 {
	if x != nil && x.FilingType != nil {
		return *x.FilingType
	}
	return 0
}

func (x *SecFiling) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *SecFiling) GetInsiderID() string {
	if x != nil {
		return x.InsiderID
	}
	return ""
}

func (x *SecFiling) GetCompanyID() string {
	if x != nil {
		return x.CompanyID
	}
	return ""
}

func (x *SecFiling) GetOfficerPosition() string {
	if x != nil && x.OfficerPosition != nil {
		return *x.OfficerPosition
	}
	return ""
}

func (x *SecFiling) GetReportedOn() string {
	if x != nil {
		return x.ReportedOn
	}
	return ""
}

type SecurityTransactionHoldings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                                string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	TransactionID                     *string  `protobuf:"bytes,2,opt,name=TransactionID,proto3,oneof" json:"TransactionID,omitempty"`
	SecFilingsID                      string   `protobuf:"bytes,3,opt,name=SecFilingsID,proto3" json:"SecFilingsID,omitempty"`
	QuantityOwnedFollowingTransaction *float64 `protobuf:"fixed64,4,opt,name=QuantityOwnedFollowingTransaction,proto3,oneof" json:"QuantityOwnedFollowingTransaction,omitempty"`
	SecurityTitle                     string   `protobuf:"bytes,5,opt,name=SecurityTitle,proto3" json:"SecurityTitle,omitempty"`
	SecurityType                      *int32   `protobuf:"varint,6,opt,name=SecurityType,proto3,oneof" json:"SecurityType,omitempty"`
	Quantity                          int64    `protobuf:"varint,7,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
	PricePerSecurity                  float64  `protobuf:"fixed64,8,opt,name=PricePerSecurity,proto3" json:"PricePerSecurity,omitempty"`
	TransactionDate                   string   `protobuf:"bytes,9,opt,name=TransactionDate,proto3" json:"TransactionDate,omitempty"`
	TransactionCode                   int32    `protobuf:"varint,10,opt,name=TransactionCode,proto3" json:"TransactionCode,omitempty"`
}

func (x *SecurityTransactionHoldings) Reset() {
	*x = SecurityTransactionHoldings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecurityTransactionHoldings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityTransactionHoldings) ProtoMessage() {}

func (x *SecurityTransactionHoldings) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityTransactionHoldings.ProtoReflect.Descriptor instead.
func (*SecurityTransactionHoldings) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{6}
}

func (x *SecurityTransactionHoldings) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *SecurityTransactionHoldings) GetTransactionID() string {
	if x != nil && x.TransactionID != nil {
		return *x.TransactionID
	}
	return ""
}

func (x *SecurityTransactionHoldings) GetSecFilingsID() string {
	if x != nil {
		return x.SecFilingsID
	}
	return ""
}

func (x *SecurityTransactionHoldings) GetQuantityOwnedFollowingTransaction() float64 {
	if x != nil && x.QuantityOwnedFollowingTransaction != nil {
		return *x.QuantityOwnedFollowingTransaction
	}
	return 0
}

func (x *SecurityTransactionHoldings) GetSecurityTitle() string {
	if x != nil {
		return x.SecurityTitle
	}
	return ""
}

func (x *SecurityTransactionHoldings) GetSecurityType() int32 {
	if x != nil && x.SecurityType != nil {
		return *x.SecurityType
	}
	return 0
}

func (x *SecurityTransactionHoldings) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *SecurityTransactionHoldings) GetPricePerSecurity() float64 {
	if x != nil {
		return x.PricePerSecurity
	}
	return 0
}

func (x *SecurityTransactionHoldings) GetTransactionDate() string {
	if x != nil {
		return x.TransactionDate
	}
	return ""
}

func (x *SecurityTransactionHoldings) GetTransactionCode() int32 {
	if x != nil {
		return x.TransactionCode
	}
	return 0
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SecFilingsID        string                 `protobuf:"bytes,2,opt,name=SecFilingsID,proto3" json:"SecFilingsID,omitempty"`
	TransactionTypeName string                 `protobuf:"bytes,3,opt,name=TransactionTypeName,proto3" json:"TransactionTypeName,omitempty"`
	AveragePrice        float64                `protobuf:"fixed64,4,opt,name=AveragePrice,proto3" json:"AveragePrice,omitempty"`
	TotalShares         int64                  `protobuf:"varint,5,opt,name=TotalShares,proto3" json:"TotalShares,omitempty"`
	TotalValue          float64                `protobuf:"fixed64,6,opt,name=TotalValue,proto3" json:"TotalValue,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{7}
}

func (x *Transaction) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Transaction) GetSecFilingsID() string {
	if x != nil {
		return x.SecFilingsID
	}
	return ""
}

func (x *Transaction) GetTransactionTypeName() string {
	if x != nil {
		return x.TransactionTypeName
	}
	return ""
}

func (x *Transaction) GetAveragePrice() float64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

func (x *Transaction) GetTotalShares() int64 {
	if x != nil {
		return x.TotalShares
	}
	return 0
}

func (x *Transaction) GetTotalValue() float64 {
	if x != nil {
		return x.TotalValue
	}
	return 0
}

func (x *Transaction) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ins  *Insider                       `protobuf:"bytes,1,opt,name=Ins,proto3" json:"Ins,omitempty"`
	Cmp  *Company                       `protobuf:"bytes,2,opt,name=Cmp,proto3" json:"Cmp,omitempty"`
	SecF *SecFiling                     `protobuf:"bytes,3,opt,name=SecF,proto3" json:"SecF,omitempty"`
	Trs  *Transaction                   `protobuf:"bytes,4,opt,name=Trs,proto3" json:"Trs,omitempty"`
	Sth  []*SecurityTransactionHoldings `protobuf:"bytes,5,rep,name=Sth,proto3" json:"Sth,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trade_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

func (x *Trade) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{8}
}

func (x *Trade) GetIns() *Insider {
	if x != nil {
		return x.Ins
	}
	return nil
}

func (x *Trade) GetCmp() *Company {
	if x != nil {
		return x.Cmp
	}
	return nil
}

func (x *Trade) GetSecF() *SecFiling {
	if x != nil {
		return x.SecF
	}
	return nil
}

func (x *Trade) GetTrs() *Transaction {
	if x != nil {
		return x.Trs
	}
	return nil
}

func (x *Trade) GetSth() []*SecurityTransactionHoldings {
	if x != nil {
		return x.Sth
	}
	return nil
}

var File_trade_proto protoreflect.FileDescriptor

var file_trade_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61,
	0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x40, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0xdb, 0x04, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x63,
	0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x53, 0x65, 0x63, 0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x44, 0x12, 0x30, 0x0a,
	0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52,
	0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x0f, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x4f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x69, 0x64,
	0x65, 0x72, 0x43, 0x69, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x49, 0x6e, 0x73,
	0x69, 0x64, 0x65, 0x72, 0x43, 0x69, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x69, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x49, 0x6e,
	0x73, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x43, 0x69, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x43, 0x69, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x54, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x22, 0x57, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03,
	0x43, 0x69, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x43, 0x69, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x07, 0x49, 0x6e,
	0x73, 0x69, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x69, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x43, 0x69, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x09,
	0x53, 0x65, 0x63, 0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x0a, 0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10,
	0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c,
	0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x0f,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x4f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83,
	0x04, 0x0a, 0x1b, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x63,
	0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x53, 0x65, 0x63, 0x46, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x44, 0x12, 0x51, 0x0a,
	0x21, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x46, 0x6f,
	0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x21, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0c,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x24, 0x0a,
	0x22, 0x5f, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x46,
	0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x46, 0x69, 0x6c, 0x69, 0x6e,
	0x67, 0x73, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x63, 0x46,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x05, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x49, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x03, 0x49, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x03, 0x43, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52,
	0x03, 0x43, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x53, 0x65, 0x63, 0x46, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x63, 0x46, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x53, 0x65, 0x63, 0x46, 0x12, 0x22, 0x0a, 0x03, 0x54, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x54, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x03,
	0x53, 0x74, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x03, 0x53, 0x74, 0x68,
	0x32, 0x7b, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x2d, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12, 0x11,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x30, 0x01, 0x12,
	0x3c, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x15, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x07, 0x5a,
	0x05, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trade_proto_rawDescOnce sync.Once
	file_trade_proto_rawDescData = file_trade_proto_rawDesc
)

func file_trade_proto_rawDescGZIP() []byte {
	file_trade_proto_rawDescOnce.Do(func() {
		file_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_trade_proto_rawDescData)
	})
	return file_trade_proto_rawDescData
}

var file_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_trade_proto_goTypes = []interface{}{
	(*TradeRequest)(nil),                // 0: api.TradeRequest
	(*TradeViewRequest)(nil),            // 1: api.TradeViewRequest
	(*TradeViewResponse)(nil),           // 2: api.TradeViewResponse
	(*Company)(nil),                     // 3: api.Company
	(*Insider)(nil),                     // 4: api.Insider
	(*SecFiling)(nil),                   // 5: api.SecFiling
	(*SecurityTransactionHoldings)(nil), // 6: api.SecurityTransactionHoldings
	(*Transaction)(nil),                 // 7: api.Transaction
	(*Trade)(nil),                       // 8: api.Trade
	(*timestamppb.Timestamp)(nil),       // 9: google.protobuf.Timestamp
}
var file_trade_proto_depIdxs = []int32{
	9, // 0: api.TradeViewResponse.CreatedAt:type_name -> google.protobuf.Timestamp
	9, // 1: api.Transaction.CreatedAt:type_name -> google.protobuf.Timestamp
	4, // 2: api.Trade.Ins:type_name -> api.Insider
	3, // 3: api.Trade.Cmp:type_name -> api.Company
	5, // 4: api.Trade.SecF:type_name -> api.SecFiling
	7, // 5: api.Trade.Trs:type_name -> api.Transaction
	6, // 6: api.Trade.Sth:type_name -> api.SecurityTransactionHoldings
	0, // 7: api.TradeService.ListTrades:input_type -> api.TradeRequest
	1, // 8: api.TradeService.ListViews:input_type -> api.TradeViewRequest
	8, // 9: api.TradeService.ListTrades:output_type -> api.Trade
	2, // 10: api.TradeService.ListViews:output_type -> api.TradeViewResponse
	9, // [9:11] is the sub-list for method output_type
	7, // [7:9] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_trade_proto_init() }
func file_trade_proto_init() {
	if File_trade_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trade_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeViewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeViewResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Company); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Insider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecFiling); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecurityTransactionHoldings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trade_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_trade_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_trade_proto_msgTypes[6].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trade_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trade_proto_goTypes,
		DependencyIndexes: file_trade_proto_depIdxs,
		MessageInfos:      file_trade_proto_msgTypes,
	}.Build()
	File_trade_proto = out.File
	file_trade_proto_rawDesc = nil
	file_trade_proto_goTypes = nil
	file_trade_proto_depIdxs = nil
}

// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package service_test is a generated GoMock package.
package service_test

import (
	context "context"
	reflect "reflect"

	api "github.com/alexbobkovv/insider-trades/api"
	cursor "github.com/alexbobkovv/insider-trades/pkg/types/cursor"
	entity "github.com/alexbobkovv/insider-trades/trades-receiver-service/internal/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockInsiderTrade is a mock of InsiderTrade interface.
type MockInsiderTrade struct {
	ctrl     *gomock.Controller
	recorder *MockInsiderTradeMockRecorder
}

// MockInsiderTradeMockRecorder is the mock recorder for MockInsiderTrade.
type MockInsiderTradeMockRecorder struct {
	mock *MockInsiderTrade
}

// NewMockInsiderTrade creates a new mock instance.
func NewMockInsiderTrade(ctrl *gomock.Controller) *MockInsiderTrade {
	mock := &MockInsiderTrade{ctrl: ctrl}
	mock.recorder = &MockInsiderTradeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsiderTrade) EXPECT() *MockInsiderTradeMockRecorder {
	return m.recorder
}

// ListTransactions mocks base method.
func (m *MockInsiderTrade) ListTransactions(ctx context.Context, reqCursor *cursor.Cursor, limit uint32) ([]*entity.Transaction, *cursor.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", ctx, reqCursor, limit)
	ret0, _ := ret[0].([]*entity.Transaction)
	ret1, _ := ret[1].(*cursor.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockInsiderTradeMockRecorder) ListTransactions(ctx, reqCursor, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockInsiderTrade)(nil).ListTransactions), ctx, reqCursor, limit)
}

// ListViews mocks base method.
func (m *MockInsiderTrade) ListViews(ctx context.Context, reqCursor *cursor.Cursor, limit uint32) ([]*api.TradeViewResponse, *cursor.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListViews", ctx, reqCursor, limit)
	ret0, _ := ret[0].([]*api.TradeViewResponse)
	ret1, _ := ret[1].(*cursor.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListViews indicates an expected call of ListViews.
func (mr *MockInsiderTradeMockRecorder) ListViews(ctx, reqCursor, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListViews", reflect.TypeOf((*MockInsiderTrade)(nil).ListViews), ctx, reqCursor, limit)
}

// Receive mocks base method.
func (m *MockInsiderTrade) Receive(ctx context.Context, trade *entity.Trade) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", ctx, trade)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockInsiderTradeMockRecorder) Receive(ctx, trade interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockInsiderTrade)(nil).Receive), ctx, trade)
}

// MockInsiderTradeRepo is a mock of InsiderTradeRepo interface.
type MockInsiderTradeRepo struct {
	ctrl     *gomock.Controller
	recorder *MockInsiderTradeRepoMockRecorder
}

// MockInsiderTradeRepoMockRecorder is the mock recorder for MockInsiderTradeRepo.
type MockInsiderTradeRepoMockRecorder struct {
	mock *MockInsiderTradeRepo
}

// NewMockInsiderTradeRepo creates a new mock instance.
func NewMockInsiderTradeRepo(ctrl *gomock.Controller) *MockInsiderTradeRepo {
	mock := &MockInsiderTradeRepo{ctrl: ctrl}
	mock.recorder = &MockInsiderTradeRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsiderTradeRepo) EXPECT() *MockInsiderTradeRepoMockRecorder {
	return m.recorder
}

// ListTransactions mocks base method.
func (m *MockInsiderTradeRepo) ListTransactions(ctx context.Context, reqCursor *cursor.Cursor, limit uint32) ([]*entity.Transaction, *cursor.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTransactions", ctx, reqCursor, limit)
	ret0, _ := ret[0].([]*entity.Transaction)
	ret1, _ := ret[1].(*cursor.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTransactions indicates an expected call of ListTransactions.
func (mr *MockInsiderTradeRepoMockRecorder) ListTransactions(ctx, reqCursor, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTransactions", reflect.TypeOf((*MockInsiderTradeRepo)(nil).ListTransactions), ctx, reqCursor, limit)
}

// ListViews mocks base method.
func (m *MockInsiderTradeRepo) ListViews(ctx context.Context, reqCursor *cursor.Cursor, limit uint32) ([]*api.TradeViewResponse, *cursor.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListViews", ctx, reqCursor, limit)
	ret0, _ := ret[0].([]*api.TradeViewResponse)
	ret1, _ := ret[1].(*cursor.Cursor)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListViews indicates an expected call of ListViews.
func (mr *MockInsiderTradeRepoMockRecorder) ListViews(ctx, reqCursor, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListViews", reflect.TypeOf((*MockInsiderTradeRepo)(nil).ListViews), ctx, reqCursor, limit)
}

// StoreTrade mocks base method.
func (m *MockInsiderTradeRepo) StoreTrade(ctx context.Context, trade *entity.Trade) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreTrade", ctx, trade)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreTrade indicates an expected call of StoreTrade.
func (mr *MockInsiderTradeRepoMockRecorder) StoreTrade(ctx, trade interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreTrade", reflect.TypeOf((*MockInsiderTradeRepo)(nil).StoreTrade), ctx, trade)
}

// MockInsiderTradePublisher is a mock of InsiderTradePublisher interface.
type MockInsiderTradePublisher struct {
	ctrl     *gomock.Controller
	recorder *MockInsiderTradePublisherMockRecorder
}

// MockInsiderTradePublisherMockRecorder is the mock recorder for MockInsiderTradePublisher.
type MockInsiderTradePublisherMockRecorder struct {
	mock *MockInsiderTradePublisher
}

// NewMockInsiderTradePublisher creates a new mock instance.
func NewMockInsiderTradePublisher(ctrl *gomock.Controller) *MockInsiderTradePublisher {
	mock := &MockInsiderTradePublisher{ctrl: ctrl}
	mock.recorder = &MockInsiderTradePublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInsiderTradePublisher) EXPECT() *MockInsiderTradePublisherMockRecorder {
	return m.recorder
}

// PublishTrade mocks base method.
func (m *MockInsiderTradePublisher) PublishTrade(ctx context.Context, trade *entity.Trade) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTrade", ctx, trade)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTrade indicates an expected call of PublishTrade.
func (mr *MockInsiderTradePublisherMockRecorder) PublishTrade(ctx, trade interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTrade", reflect.TypeOf((*MockInsiderTradePublisher)(nil).PublishTrade), ctx, trade)
}
